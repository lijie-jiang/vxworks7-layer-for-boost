#!/bin/sh
# each line ends with "\" to keep the TCL interpreter from executing it \
if [ ! -z "$WIND_BASE" ]; then \
    TCL_LIBRARY=$WIND_BASE/host/tcl/tcl; \
    export TCL_LIBRARY; \
fi; \
if [ "$WIND_HOST_TYPE" = "x86-win32" ]; then \
    exec tclsh "$0" ${1+"$@"}; \
else \
    exec expect -- "$0" ${1+"$@"}; \
fi

if {([info command expect] == "") && ($env(WIND_HOST_TYPE) == "x86-win32")} {
    package require Expect
}
### #/usr/bin/expect -f
#
# This Expect script executes a boost test RTP on a VxWorks
# target with telnet, based on a local filepath
#
# it is assumed rlogin is disabled and
# no login credentials are necessary
#
# Copyright 2016-2017  Wind River Systems, Inc.
#
# Use, modification and distribution are subject to the
# Boost Software License, Version 1.0.  (See accompanying file
# LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#
# modification history
# --------------------
# 21feb17,dlk  Increase timeout to 100s, sleep after reboot to 25s, and
#              RTP initial task stack size to 100000 bytes.
# 16dec16,dlk  Add VX_FP_TASK flag (-t 0x01000000) when launching RTPs.
# 02oct16,brk  use -- in run command to mark end of options
# 23sep16,brk  use new -x option to get exit status
# 31mar16,brk  written
#

set telnet_ip $::env(BOOST_TELNET_ADDR)
set src_dir $::env(LAYER_SRC_PATH)
set ld_library_path $::env(VSB_LD_LIBRARY_PATH)

set timeout 100

proc disconnect { return } {
	log_user 0
	sleep 1

	send -- "exit\r"
	expect eof
	puts "\r"
	exit $return
}

#log_user 0
spawn telnet {*}$telnet_ip
match_max 100000
expect {
	timeout {puts "Connection timed out\r"; exit 1}
    "Connection refused" {puts "Connection refused\r"; exit 1}
    -ex "->"
	}
send -- "cmd\r"
sleep 0.1
expect -exact "\[vxWorks *\]# "
send -- "set env \"LD_LIBRARY_PATH=$ld_library_path\"\r"
sleep 0.1
expect -exact "\[vxWorks *\]# "
log_user 1

send -- "cd $src_dir/status\r"
sleep 0.1
expect -exact "\[vxWorks *\]# "
send -- "run -x -t 0x01000000 -u 100000 -- "
foreach arg $::argv {
	send -- "$arg "
	}
send -- "\r"
sleep 3
expect {
       timeout { puts "\nRTP Execution Timeout; rebooting\n"
                 send -- "\x18"
                 sleep 25
                 exit 1 }
       -exact "due to signal 6." {puts "\n\n SIGABRT\r";  disconnect 2 }
       -exact "due to signal 11." {puts "\n\n SEGFAULT\r";  disconnect 2 }
       -exact "and has been deleted." { disconnect 3 }
       -exact "\[vxWorks *\]# "
}
log_user 0
send -- "echo \$?\r"
expect -re "(\\d+)" {
	set result $expect_out(1,string)
	}
disconnect $result
